[project]
name = "gmail-calendar-sync"
version = "0.1.0"
description = "ðŸ¤– AI-powered email analysis system that automatically extracts flight & car sharing bookings from Gmail and creates Google Calendar events"
authors = [
    {name = "yoshitaka", email = "yoshi65@example.com"}
]
maintainers = [
    {name = "yoshitaka", email = "yoshi65@example.com"}
]
readme = {file = "README.md", content-type = "text/markdown"}
license = {text = "MIT"}
keywords = ["gmail", "calendar", "ai", "automation", "openai", "google-api", "email-processing"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Communications :: Email",
    "Topic :: Office/Business :: Scheduling",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
requires-python = "==3.13.5"
dependencies = [
    "pydantic==2.11.7",
    "pydantic-settings==2.10.1",
    "google-auth==2.40.3",
    "google-auth-oauthlib==1.2.2",
    "google-auth-httplib2==0.2.0",
    "google-api-python-client==2.176.0",
    "openai==1.95.1",
    "python-dotenv==1.1.1",
    "structlog==25.4.0",
    "httpx==0.28.1",
]

[project.urls]
"Homepage" = "https://github.com/yoshi65/gmail-calendar-sync"
"Documentation" = "https://github.com/yoshi65/gmail-calendar-sync#readme"
"Repository" = "https://github.com/yoshi65/gmail-calendar-sync"
"Bug Tracker" = "https://github.com/yoshi65/gmail-calendar-sync/issues"
"Changelog" = "https://github.com/yoshi65/gmail-calendar-sync/releases"

[project.optional-dependencies]
dev = [
    "pytest==8.4.1",
    "pytest-asyncio==1.0.0",
    "pytest-cov==6.2.1",
    "coverage==7.9.2",
    "mypy==1.16.1",
    "ruff==0.12.3",
    "types-requests==2.32.4.20250611",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--tb=short",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "tests/*",
    "src/**/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false
skip_empty = true

[tool.coverage.html]
directory = "htmlcov"

[dependency-groups]
dev = [
    "pre-commit==4.2.0",
    "pytest==8.4.1",
    "pytest-benchmark==5.1.0",
]
