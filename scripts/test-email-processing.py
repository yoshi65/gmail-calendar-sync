#!/usr/bin/env python3
"""Test email processing with sample data for development and debugging."""

import json
import sys
from pathlib import Path
from typing import Any

# Add src to path for imports
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

try:
    from models.email_types import EmailMessage, EmailType
    from processors.factory import EmailProcessorFactory
    from utils.config import get_settings
    from utils.logging import configure_logging
except ImportError as e:
    print(f"‚ùå Failed to import project modules: {e}")
    print("   Make sure you're running this from the project root.")
    sys.exit(1)


# Sample email data for testing
SAMPLE_EMAILS = {
    "ana_flight": {
        "id": "test_ana_001",
        "subject": "ANA „Åî‰∫àÁ¥ÑÁ¢∫Ë™ç [Á¢∫Ë™çÁï™Âè∑: 887525617]",
        "body": """Â±±Áî∞Â§™ÈÉé Êßò

„Åì„ÅÆÂ∫¶„ÅØ„ÄÅANA„Çí„ÅîÂà©Áî®„ÅÑ„Åü„Å†„Åç„ÄÅË™†„Å´„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åô„ÄÇ
‰ª•‰∏ã„ÅÆÂÜÖÂÆπ„Åß„Åî‰∫àÁ¥Ñ„ÇíÊâø„Çä„Åæ„Åó„Åü„ÄÇ

‚ñ† Á¢∫Ë™çÁï™Âè∑: 887525617
‚ñ† ‰∫àÁ¥ÑÁï™Âè∑: 0709

‚ñ† ÂæÄË∑Ø
‰æøÂêç: NH006
Âá∫Áô∫: 2024Âπ¥1Êúà15Êó• 08:30 ÁæΩÁî∞Á©∫Ê∏Ø(HND)
Âà∞ÁùÄ: 2024Âπ¥1Êúà15Êó• 11:45 ‰ºä‰∏πÁ©∫Ê∏Ø(ITM)
Â∫ßÂ∏≠: 12A

‚ñ† Âæ©Ë∑Ø
‰æøÂêç: NH017
Âá∫Áô∫: 2024Âπ¥1Êúà20Êó• 18:20 ‰ºä‰∏πÁ©∫Ê∏Ø(ITM)
Âà∞ÁùÄ: 2024Âπ¥1Êúà20Êó• 19:35 ÁæΩÁî∞Á©∫Ê∏Ø(HND)
Â∫ßÂ∏≠: 15C

‚ñ† Êê≠‰πóËÄÖ
Â±±Áî∞Â§™ÈÉé

ANA""",
        "domain": "ana.co.jp",
        "expected_type": EmailType.FLIGHT,
    },
    "times_car": {
        "id": "test_times_001",
        "subject": "„Äê„Çø„Ç§„É†„Ç∫„Ç´„Éº„Äë„ÅîÂà©Áî®ÈñãÂßã„ÅÆ„ÅäÁü•„Çâ„Åõ [‰∫àÁ¥ÑÁï™Âè∑: TC123456]",
        "body": """Â±±Áî∞Â§™ÈÉé Êßò

„Çø„Ç§„É†„Ç∫„Ç´„Éº„ÅÆ„Åî‰∫àÁ¥Ñ„ÅåÂÆå‰∫Ü„ÅÑ„Åü„Åó„Åæ„Åó„Åü„ÄÇ

‚ñ† ‰∫àÁ¥ÑÁï™Âè∑: TC123456
‚ñ† Âà©Áî®ËÄÖ: Â±±Áî∞Â§™ÈÉé
‚ñ† „Çπ„ÉÜ„Éº„Ç∑„Éß„É≥: Êñ∞ÂÆøÈßÖÂçóÂè£„Çπ„ÉÜ„Éº„Ç∑„Éß„É≥
‚ñ† ‰ΩèÊâÄ: Êù±‰∫¨ÈÉΩÊñ∞ÂÆøÂå∫Êñ∞ÂÆø3-1-1

‚ñ† Âà©Áî®ÊôÇÈñì
ÈñãÂßã: 2024Âπ¥1Êúà10Êó• 14:00
ÁµÇ‰∫Ü: 2024Âπ¥1Êúà10Êó• 16:00

„Çø„Ç§„É†„Ç∫„Ç´„Éº""",
        "domain": "share.timescar.jp",
        "expected_type": EmailType.CAR_SHARE,
    },
    "promotional": {
        "id": "test_promo_001",
        "subject": "ANA„Éû„Ç§„É´„Ç≠„É£„É≥„Éö„Éº„É≥ÈñãÂßãÔºÅ",
        "body": """„Éû„Ç§„É´Áç≤Âæó„ÅÆÁµ∂Â•Ω„ÅÆ„ÉÅ„É£„É≥„ÇπÔºÅ

ÊúüÈñìÈôêÂÆö„Åß„Éû„Ç§„É´2ÂÄç„Ç≠„É£„É≥„Éö„Éº„É≥„ÇíÂÆüÊñΩ‰∏≠„Åß„Åô„ÄÇ

ANA""",
        "domain": "ana.co.jp",
        "expected_type": None,  # Should be filtered out
    },
}


def create_test_email(email_data: dict[str, Any]) -> EmailMessage:
    """Create EmailMessage from test data."""
    from datetime import datetime

    return EmailMessage(
        id=email_data["id"],
        subject=email_data["subject"],
        body=email_data["body"],
        domain=email_data["domain"],
        datetime=datetime.now(),
    )


def test_email_processing(email_key: str) -> None:
    """Test processing of a specific email type."""
    if email_key not in SAMPLE_EMAILS:
        print(f"‚ùå Unknown email type: {email_key}")
        print(f"   Available types: {', '.join(SAMPLE_EMAILS.keys())}")
        return

    email_data = SAMPLE_EMAILS[email_key]
    email = create_test_email(email_data)

    print(f"\nüß™ Testing {email_key} email processing...")
    print(f"üìß Subject: {email.subject}")
    print(f"üåê Domain: {email.domain}")
    print(f"üìù Expected Type: {email_data['expected_type']}")

    # Initialize processor factory
    try:
        settings = get_settings()
        factory = EmailProcessorFactory(settings)
    except Exception as e:
        print(f"‚ùå Failed to initialize processor factory: {e}")
        return

    # Get appropriate processor
    processor = factory.get_processor(email)

    if not processor:
        if email_data["expected_type"] is None:
            print("‚úÖ No processor found (expected for promotional emails)")
        else:
            print("‚ùå No processor found for this email type")
        return

    print(f"üîß Processor: {type(processor).__name__}")

    # Check if it should be processed with AI
    should_process = processor.should_process_with_ai(email)
    print(f"ü§ñ Should process with AI: {should_process}")

    if not should_process and email_data["expected_type"] is None:
        print("‚úÖ Correctly filtered out promotional email")
        return

    # Process the email (dry run - don't actually create calendar events)
    print("‚öôÔ∏è  Processing email...")

    try:
        # Note: This will actually call OpenAI API if not filtered out
        # For true dry-run, you'd need to mock the OpenAI client
        result = processor.process(email)

        print("üìä Processing Result:")
        print(f"  Success: {result.success}")
        print(f"  Email Type: {result.email_type}")

        if result.success and result.extracted_data:
            print("  Extracted Data:")
            print(json.dumps(result.extracted_data, indent=2, ensure_ascii=False))
        elif result.error_message:
            print(f"  Error: {result.error_message}")

    except Exception as e:
        print(f"‚ùå Processing failed: {e}")


def test_all_emails() -> None:
    """Test processing of all sample emails."""
    print("üß™ Testing all sample email types...")

    for email_key in SAMPLE_EMAILS:
        test_email_processing(email_key)
        print("-" * 50)


def main():
    """Main function."""
    print("üìß Gmail Calendar Sync - Email Processing Tester")
    print("=" * 50)

    # Setup logging
    configure_logging("DEBUG", json_format=False)

    if len(sys.argv) < 2:
        print("Usage:")
        print(f"  {sys.argv[0]} <email_type>     # Test specific email type")
        print(f"  {sys.argv[0]} all              # Test all email types")
        print(f"\nAvailable email types: {', '.join(SAMPLE_EMAILS.keys())}")
        return

    email_type = sys.argv[1]

    if email_type == "all":
        test_all_emails()
    else:
        test_email_processing(email_type)

    print("\n‚úÖ Email processing test completed!")
    print("\nüìù Notes:")
    print("  - This test uses real OpenAI API calls (if not filtered)")
    print("  - No calendar events are actually created")
    print("  - Check logs for detailed processing information")


if __name__ == "__main__":
    main()
