name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12", "3.13"]
      fail-fast: false

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: ${{ runner.os }}-uv-${{ hashFiles('**/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-

    - name: Install dependencies
      run: uv sync --all-extras

    - name: Run ruff linting
      run: uv run ruff check src/ tests/

    - name: Run ruff formatting check
      run: uv run ruff format src/ tests/ --check

    - name: Run mypy type checking
      run: uv run mypy src/

    - name: Run dependency audit
      run: |
        uv add --group security pip-audit
        uv run pip-audit --format=json --output=audit-report.json || true
        if [ -f audit-report.json ]; then
          echo "## 🔍 Security Audit Report" >> $GITHUB_STEP_SUMMARY
          vulnerabilities=$(cat audit-report.json | python3 -c "import sys, json; data=json.load(sys.stdin); print(len(data.get('vulnerabilities', [])))" 2>/dev/null || echo "0")
          if [ "$vulnerabilities" -gt "0" ]; then
            echo "- ⚠️  Found $vulnerabilities potential vulnerabilities" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ✅ No vulnerabilities detected" >> $GITHUB_STEP_SUMMARY
          fi
        fi

    - name: Run tests with coverage
      run: uv run pytest tests/ -v --tb=short --cov=src --cov-report=xml --cov-report=term-missing

    - name: Run performance benchmarks (Python 3.13 only)
      if: matrix.python-version == '3.13'
      run: |
        uv run pytest tests/test_performance.py --benchmark-only --benchmark-json=benchmark.json || true
        if [ -f benchmark.json ]; then
          echo "## 🚀 Performance Benchmark Results" >> $GITHUB_STEP_SUMMARY
          echo "Performance tests completed. See benchmark.json for details." >> $GITHUB_STEP_SUMMARY
        fi

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

    - name: Quality gate analysis
      run: |
        echo "## 📊 Code Quality Report (Python ${{ matrix.python-version }})" >> $GITHUB_STEP_SUMMARY
        echo "### Quality Checks" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Linting (ruff) passed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Code formatting (ruff) passed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Type checking (mypy) passed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Tests passed" >> $GITHUB_STEP_SUMMARY
        if [ -f audit-report.json ]; then
          echo "- ✅ Security audit completed" >> $GITHUB_STEP_SUMMARY
        fi
        echo "### Coverage Status" >> $GITHUB_STEP_SUMMARY
        if [ -f coverage.xml ]; then
          coverage=$(python3 -c "
          import xml.etree.ElementTree as ET
          try:
              tree = ET.parse('coverage.xml')
              coverage = tree.getroot().attrib['line-rate']
              print(f'{float(coverage)*100:.1f}%')
          except:
              print('N/A')
          " 2>/dev/null || echo "N/A")
          echo "- 📈 Test Coverage: $coverage" >> $GITHUB_STEP_SUMMARY
          # Check coverage threshold
          if [ -f coverage.xml ]; then
            coverage_num=$(python3 -c "
            import xml.etree.ElementTree as ET
            try:
                tree = ET.parse('coverage.xml')
                coverage = float(tree.getroot().attrib['line-rate']) * 100
                print(coverage)
            except:
                print('0')
            " 2>/dev/null || echo "0")
            if (( $(echo "$coverage_num >= 50" | bc -l) )); then
              echo "- ✅ Coverage threshold (50%) met" >> $GITHUB_STEP_SUMMARY
            else
              echo "- ⚠️  Coverage below threshold (50%)" >> $GITHUB_STEP_SUMMARY
            fi
          fi
        else
          echo "- 📈 Test Coverage: N/A" >> $GITHUB_STEP_SUMMARY
        fi
        echo "### Quality Gates" >> $GITHUB_STEP_SUMMARY
        echo "- 🚪 All quality gates passed ✅" >> $GITHUB_STEP_SUMMARY
